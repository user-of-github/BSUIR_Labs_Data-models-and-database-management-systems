-- clear tables

BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE students';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE groups';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- TASK 1
CREATE TABLE students(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    group_id NUMBER
);

CREATE TABLE groups(
    id NUMBER PRIMARY KEY,
    name VARCHAR2(50) NOT NULL,
    students_count NUMBER NOT NULL
);

INSERT INTO students(name, group_id) VALUES('Alex', 1);
INSERT INTO students(name, group_id) VALUES('Ivan', 1);
INSERT INTO students(name, group_id) VALUES('Katya', 2);
INSERT INTO students(name, group_id) VALUES('Masha', 1);
INSERT INTO students(name, group_id) VALUES('Roma', 2);
INSERT INTO students(name, group_id) VALUES('Kostya', 2);
INSERT INTO students(name, group_id) VALUES('Yars', 3);
INSERT INTO students(name, group_id) VALUES('Angelina', 3);
INSERT INTO students(name, group_id) VALUES('Polina', 3);


INSERT INTO groups(id, name, students_count) VALUES(1, 'Group A', 0);
INSERT INTO groups(id, name, students_count) VALUES(2, 'Group B', 0);
INSERT INTO groups(id, name, students_count) VALUES(3, 'Group C', 0);


-- TASK 2

/
DROP SEQUENCE group_id_generator;
CREATE SEQUENCE group_id_generator START WITH 4 INCREMENT BY 1 CACHE 100;
CREATE OR REPLACE TRIGGER generate_group_id
  BEFORE INSERT ON groups
  FOR EACH ROW
BEGIN
  :new.id := group_id_generator.nextval;
END;

/

INSERT INTO groups(name, students_count) VALUES ('Group D', 0);
INSERT INTO groups(name, students_count) VALUES ('Group E', 0);
INSERT INTO groups(name, students_count) VALUES ('Group F', 0);
SELECT * from groups;


/
-- Trigger to check uniq of group name
CREATE OR REPLACE TRIGGER check_group_name
BEFORE INSERT OR UPDATE
ON groups FOR EACH ROW
DECLARE
id_ NUMBER;
existing_name EXCEPTION;
BEGIN
         dbms_output.put_line('successfully inserted!');
        SELECT groups.id INTO id_ FROM groups WHERE groups.name=:NEW.name;
        dbms_output.put_line('This name already exists'||:NEW.name);
        raise existing_name;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        dbms_output.put_line('successfully inserted!');
END;

/
ALTER TRIGGER check_group_name DISABLE;
ALTER TRIGGER check_group_name ENABLE;
-- check this trigger
/
INSERT INTO groups(name, students_count) VALUES('Group K', 0);